version: '3.8'

networks:
  dem:
    name: dem

services:
  restapi:
    build:
      context: .
      dockerfile: Dockerfile 
    image: venkateshtangaraj/${IMAGE_NAME}:${IMAGE_VERSION}
    depends_on:
      DB:
        condition: service_healthy
        restart: true
      migration:
        condition: service_completed_successfully
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      #This should be service name of DB from docker-compose file
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    ports:
      - "${APP_PORT}:8000"
    networks:
      - dem

  DB:
    image: postgres:17.3
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ./data/db:/var/lib/postgresql/data 
    networks:
      - dem

  migration:
    build: 
      context: ./DB/Schemas/
      dockerfile: Dockerfile
    image: migration:${IMAGE_VERSION}
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    depends_on:
      DB:
        condition: service_healthy
        restart: true
    networks:
      - dem